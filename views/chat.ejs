<!DOCTYPE html>
<html lang="ko">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <link href="/public/main.css" rel="stylesheet" />
    <!-- Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css"
      integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn"
      crossorigin="anonymous"
    />

    <title>To-Do</title>
  </head>
  <body>
    <%- include('nav.ejs', {auth: auth}) %>
    <h2 class="container mt-4" style="text-align: center">
      <strong>Chat</strong>
    </h2>
    <div class="container p-4 detail">
      <div class="row">
        <div class="col-lg-12">
          <div class="accordion" id="accordionExample">
            <div class="card">
              <div class="card-header" id="headingOne">
                <span id="user-list-toggle">▼</span>
                <button
                  id="user-list-btn"
                  type="button"
                  data-toggle="collapse"
                  data-target="#collapseOne"
                  aria-expanded="true"
                  aria-controls="collapseOne"
                >
                  접속멤버 0명
                </button>
              </div>

              <div
                id="collapseOne"
                class="collapse"
                aria-labelledby="headingOne"
                data-parent="#accordionExample"
              >
                <div class="card-body"></div>
              </div>
            </div>
          </div>
          <div class="chat-room">
            <ul class="list-group chat-content"></ul>
            <div class="input-group">
              <span id="auth-id" style="display: none"><%= auth.id %></span>
              <input class="form-control" id="chat-input" />
              <button class="btn btn-secondary" id="send">전송</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.1/socket.io.js"
      integrity="sha512-9mpsATI0KClwt+xVZfbcf2lJ8IFBAwsubJ6mI3rtULwyM3fBmQFzj0It4tGqxLOGQwGfJdk/G+fANnxfq9/cew=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script>
      let socket = io();

      const userListBtn = document.querySelector('#user-list-btn');
      const userListToggle = document.querySelector('#user-list-toggle');
      const userCollapse = document.querySelector('#collapseOne');
      let userListBox = document.querySelector('.card-body');

      userListBtn.addEventListener('click', () => {
        if (userListToggle.textContent == '▼') {
          userListToggle.textContent = '▲';
        } else {
          userListToggle.textContent = '▼';
        }
      });

      const sendBtn = document.querySelector('#send');
      const sendInput = document.querySelector('#chat-input');
      const chatBox = document.querySelector('.chat-content');

      const userName = document.querySelector('#auth-id').textContent;

      function chatUpdate() {
        if (sendInput.value.trim() != '') {
          socket.emit('userSend', [userName, sendInput.value]);
          sendInput.value = '';
        }
      }

      sendBtn.addEventListener('click', chatUpdate);
      sendInput.addEventListener('keyup', (e) => {
        if (e.keyCode === 13) {
          chatUpdate();
        }
      });

      socket.on('connect', () => {
        socket.emit('newUserConnect', userName);
      });

      socket.on('sayHi', (name) => {
        const msgList = document.createElement('li');
        const msgAlert = document.createElement('div');
        const msgSpan = document.createElement('span');
        const msgUserName = document.createElement('span');
        msgAlert.classList.add('alert');
        msgAlert.classList.add('alert-connect');
        msgUserName.classList.add('chat-author');
        msgUserName.textContent = `${name}`;
        msgSpan.textContent = '님이 들어왔어요! 안녕!';
        msgAlert.appendChild(msgUserName);
        msgAlert.appendChild(msgSpan);
        msgList.appendChild(msgAlert);
        chatBox.appendChild(msgList);
      });

      socket.on('sayBye', (name) => {
        const msgList = document.createElement('li');
        const msgAlert = document.createElement('div');
        const msgSpan = document.createElement('span');
        const msgUserName = document.createElement('span');
        msgAlert.classList.add('alert');
        msgAlert.classList.add('alert-disconnect');
        msgUserName.classList.add('chat-author');
        msgUserName.textContent = `${name}`;
        msgSpan.textContent = '님이 떠났습니다. 잘 가...';
        msgAlert.appendChild(msgUserName);
        msgAlert.appendChild(msgSpan);
        msgList.appendChild(msgAlert);
        chatBox.appendChild(msgList);
      });

      socket.on('updateUserList', (userList) => {
        userListBtn.textContent = `접속멤버 ${userList.length}명`;
        userListBox.remove();
        userListBox = document.createElement('div');
        userListBox.classList.add('.card-body');
        userList.forEach((user) => {
          const userTag = document.createElement('button');
          userTag.classList.add('btn');
          userTag.classList.add('btn-light');
          userTag.classList.add('user-tag');
          userTag.textContent = user;
          userListBox.appendChild(userTag);
          userCollapse.appendChild(userListBox);
        });
      });

      socket.on('broadcast', (data) => {
        const msgList = document.createElement('li');
        const msgBox = document.createElement('span');
        const msgAuthor = document.createElement('span');
        const msgText = document.createElement('span');
        const msgDate = document.createElement('small');
        const now = new Date();

        msgBox.classList.add('chat-box');
        if (userName == data[0]) {
          msgBox.classList.add('mine');
        }
        msgAuthor.classList.add('chat-author');
        msgText.classList.add('chat-text');

        msgAuthor.textContent = data[0];
        console.log(data[0], msgAuthor.textContent);
        msgAuthor.appendChild(document.createElement('br'));
        msgText.textContent = data[1];
        msgText.appendChild(document.createElement('br'));

        msgDate.textContent = `${
          now.getMonth() + 1
        }/${now.getDate()} ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;

        msgBox.appendChild(msgAuthor);
        msgBox.appendChild(msgText);
        msgBox.appendChild(msgDate);

        msgList.appendChild(msgBox);
        chatBox.appendChild(msgList);
        chatBox.scrollTop = chatBox.scrollHeight;
      });
    </script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <script
      src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"
      integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
      integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js"
      integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
